class App extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <Calculator />
        <Author />
      </div>
    );
  }
}

class Calculator extends React.Component {
  constructor(props) {
    super(props);
    this.state = { display: '0', expression: [], equal: '' };
    this.input = this.input.bind(this);
  }
  
  input(e) {
    let dis = '0'
    let exp = [...this.state.expression];
    let eq = this.state.equal;
    
    if (e.target.getAttribute('value') == 'AC') {
      dis = '0';
      exp = [];
      eq = '';
    } else if (e.target.getAttribute('value') == '=') {
      
      if(exp.length !== 0 && exp[exp.length-2] !=='=') {
        
        if(exp[exp.length-1] == '/' || exp[exp.length-1] == '*' || 
           exp[exp.length-1] == '-' || exp[exp.length-1] == '+')
        {
          exp.pop();
        }
        
        let exp1 = [...exp];
        
        for(let i = 0; i < exp1.length; i++) {
          if(exp1[i] == '/' || exp1[i] == '*') {
            exp1[i-1] = eval(exp1[i-1] + exp1[i] + exp1[i+1]);
            exp1.splice(i, 2);
            i--;
          }
        }
        
        for(let i = 0; i < exp1.length; i++) {
          if(exp1[i] == '-' || exp1[i] == '+') {
            exp1[i-1] = eval(exp1[i-1] + exp1[i] + exp1[i+1]);
            exp1.splice(i, 2);
            i--;
          }
        }
        
        exp.push('=');
        exp.push(exp1[0]);
        
        dis = exp1[0];
        eq = '=';
      } else {
        dis = this.state.display;
      }
      
    } else {
      
      if(eq == '=') {
        exp = [this.state.expression[this.state.expression.length-1]];
        eq = '';
      }

      if(exp.length == 0){
        
        if(e.target.getAttribute('value') == '/' || e.target.getAttribute('value') == '*' || 
           e.target.getAttribute('value') == '-' || e.target.getAttribute('value') == '+') {
          
        } else {
          exp.push(e.target.getAttribute('value'));
          dis = exp[exp.length-1];
        }
        
      } else {
        if(exp[exp.length-1] == '/' || exp[exp.length-1] == '*' || 
           exp[exp.length-1] == '-' || exp[exp.length-1] == '+') {
          
          if(e.target.getAttribute('value') == '/' || e.target.getAttribute('value') == '*' || 
             e.target.getAttribute('value') == '-' || e.target.getAttribute('value') == '+') {
            exp[exp.length-1] = e.target.getAttribute('value');
          } else {
            
            if(e.target.getAttribute('value') == '.'){
              exp.push('0.');
            } else {
              exp.push(e.target.getAttribute('value'));
            }
            
          }
          
        } else {
          
          if(e.target.getAttribute('value') == '/' || e.target.getAttribute('value') == '*' || 
             e.target.getAttribute('value') == '-' || e.target.getAttribute('value') == '+') {
            exp.push(e.target.getAttribute('value'));

          } else {
            
            if(e.target.getAttribute('value') == '.') {
              
              if(exp[exp.length-1].indexOf('.') == -1) {
                exp[exp.length-1] = exp[exp.length-1] + e.target.getAttribute('value');
              }
            
            } else {
              
              if (exp[exp.length-1] == '0') {
                exp[exp.length-1] = e.target.getAttribute('value');
              } else {
                exp[exp.length-1] = exp[exp.length-1] + e.target.getAttribute('value');
              }

            }
            
          }
          
        }
        dis = exp[exp.length-1];
      }
    }
    
    this.setState({ display: dis, expression: [...exp], equal: eq });

  }
  
  render() {
    return (
      <div className="container">
        <div className="expression">{this.state.expression.join('')}</div>
        <div className="display" id="display">{this.state.display}</div>
        <div className="box clear" id="clear" onClick={this.input} value="AC">AC</div>
        <div className="box divide" id="divide" onClick={this.input} value="/">/</div>
        <div className="box multiply" id="multiply" onClick={this.input} value="*">x</div>
        <div className="box seven" id="seven" onClick={this.input} value="7">7</div>
        <div className="box eight" id="eight" onClick={this.input} value="8">8</div>
        <div className="box nine" id="nine" onClick={this.input} value="9">9</div>
        <div className="box subtract" id="subtract" onClick={this.input} value="-">-</div>
        <div className="box four" id="four" onClick={this.input} value="4">4</div>
        <div className="box five" id="five" onClick={this.input} value="5">5</div>
        <div className="box six" id="six" onClick={this.input} value="6">6</div>
        <div className="box add" id="add" onClick={this.input} value="+">+</div>
        <div className="box one" id="one" onClick={this.input} value="1">1</div>
        <div className="box two" id="two" onClick={this.input} value="2">2</div>
        <div className="box three" id="three" onClick={this.input} value="3">3</div>
        <div className="box equals" id="equals" onClick={this.input} value="=">=</div>
        <div className="box zero" id="zero" onClick={this.input} value="0">0</div>
        <div className="box decimal" id="decimal" onClick={this.input} value=".">.</div>
      </div>
    );
  }
}

class Author extends React.Component {
  render() {
    return (
      <div className="author">Designed and Coded By<br /><a target="_blank" href="https://codepen.io/dashzeveg">Dashzeveg</a></div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('app'));